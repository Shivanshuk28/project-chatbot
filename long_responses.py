import random
//This is the file which has all the responses.
R_EATING = "I don't like eating anything because I'm a bot obviously!"
R_ADVICE = "If I were you, I would go to the internet and type exactly what you wrote there!"
R_NAME="MY name is Sqube.You can ask me anything,anytime!"
R_CONDN="Iam fine,What about you?"
R_AGE="I am inevitable.I don't count ages."
R_do="I just simply solve your quries regrading programming languages and provide the information regarding which language will \n  be used for what purpose."
R_learn="Chatbots can learn automatically by analyzing past data and making assumptions on what is right. The other way chatbots learn is by having a human editing the system. In most cases, both are required. Even though a chatbot has artificial intelligence, a human still needs to audit the responses to make adjustments."
#R_language="No language is such best.All of them are best in their own way \n \t ","'\033[1m'+"You tell me which language you u want to know about"+'\033[0m'" 
R_language="\tNo language is best as such.All of them are best in their own way \n\t You tell me which language you u want to know about."
R_slearn="In my knowledge, if you want to know crux of programming language,then you should start with Python.All of them are best in their own way. You tell me which language you u want to know about."
R_proglang="A programming language is a way for programmers (developers) to communicate with computers. Programming languages consist of a set of \n rules that allows string values to be converted into various ways of generating machine code, or, in the case of visual programming languages, graphical elements."
#python
R_python="\t-->>Python is a high-level, general-purpose programming language.Its design philosophy emphasizes code readability with the use of \n\tsignificant indentation.\n\n\t-->>Python is dynamically-typed and garbage-collected. It supports multiple programming paradigms, including structured (particularly\n \t procedural), object-oriented and functional programming.\n\n\t-->>It is often described as a ""batteries included"" language  due to its comprehensive standard library.Guido van Rossum began\n\tworking on Python in the late 1980s as a successor to the ABC programming language.\n\n\t-->>It first released it in 1991 as Python 0.9.0. Python 2.0 was released in 2000 and introduced new features such as list\n \tcomprehensions, cycle-detecting garbage collection, reference counting, and Unicode support.\n\n\t-->> Python 3.0, released in 2008, was a major revision that is not completely backward -compatible with earlier versions.\n\n\t-->>Python 2 was discontinued with version 2.7.18 in 2020\n\n\n\n\n \t To know about python features. Write (Python Features) in chatbox to know about different features of python.\n\n "
#pythonfeatures
R_pyfeatures="Easy-to-learn − Python has few keywords, simple structure, and a clearly defined syntax. This allows the student to pick up the language\n\t quickly.\n \t->Easy-to-read − Python code is more clearly defined and visible to the eyes.\n \t->Easy-to-maintain − Python's source code is fairly easy-to-maintain.\n \t->A broad standard library − Python's bulk of the library is very portable and cross-platform compatible on UNIX, Windows, and Macintosh.\n \t->Interactive Mode − Python has support for an interactive mode which allows interactive testing and debugging of snippets of code.\n \t->Portable − Python can run on a wide variety of hardware platforms and has the same interface on all platforms.\n \t->Extendable − You can add low-level modules to the Python interpreter. These modules enable programmers to add to or customize their tools \n\tto be more efficient.\n \t->Databases − Python provides interfaces to all major commercial databases.\n \t->GUI Programming − Python supports GUI applications that can be created and ported to many system calls, libraries and windows systems, \n\tsuch as Windows\n\t MFC, Macintosh, and the X Window system of Unix.\n \t->Scalable − Python provides a better structure and support for large programs than shell scripting.\n\n\t Write (Python Variables) in chatbox to know about different variables of python.\n\n"
#pythonvariables
R_pyvariables="Variables are containers for storing data values.\n \tPython has no command for declaring a variable.\n \tA variable is created the moment you first assign a value to it.\n \n\tExample \n\tx = 5\n\ty = ""John""\n\tprint(x)\n\tprint(y)\n\t Variables do not need to be declared with any particular type, and can even change type after they have been set.String variables can be\n \t declared either by using single or double quotes\n\n\t Write (Python Operators) in chatbox to know about python opeartors.\n\n"
#pythonoperators
R_pyoperators="Operators are used to perform operations on variables and values.\n\tIn the example below, we use the + operator to add together two values:\n\n\tExample:-\n\tprint(10 + 5) \t output:-15 \n\n\tPython divides the operators in the following groups:\n\t->Arithmetic operators\n\t->Assignment operators\n\t->Comparison operators\n\t->Logical operators\n\t->Identity operators\n\t->Membership operators\n\t->Bitwise operators\n\n\tWrite (Python Datatypes) in chatbox to know about python Datatypes.\n\n"
#pythondatatypes
R_pydatatypes="In programming, data type is an important concept.\n\tVariables can store data of different types, and different types can do different things.\n\tPython has the following data types built-in by default, in these categories:\n\t->Text Type:  str\n\t->Numeric Types:  int, float, complex\n\t->Sequence Types:  list, tuple, range\n\t->Mapping Type:	dict\n\t->Set Types:	set, frozenset\n\t->Boolean Type:	bool\n\t->Binary Types:	bytes, bytearray, memoryview\n\t->None Type:	NoneType.\n\n\tExample:-\n\tPrint the data type of the variable x:\n\t x = 5\n\t print(type(x)) \t output:<class'int'>\n\n\tWrite (Python Comments) in chatbox to know about python Comments\n\n"
#pythoncomments--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
R_pycomments="Comments can be used to explain Python code.\n\tComments can be used to make the code more readable.\n\tComments can be used to prevent execution when testing code.\n\tCreating a Comment\n\tComments starts with a #, and Python will ignore them:\n\n\tExample:-\n\t#This is a comment\n\n\tA comment does not have to be text that explains the code, it can also be used to prevent Python from executing code.\n\n\n\tWrite (Python Strings) in chatbox to know about python strings.\n\n"
#pythonstrings
R_pystrings="Strings in python are surrounded by either single quotation marks, or double quotation marks.\n\t'hello' is the same as ""hello"".\n\tYou can display a string literal with the print() function:\n\n\tExample:-\n\tprint(""Hello"")\n\tprint('Hello')\n\n\tLike many other popular programming languages, strings in Python are arrays of bytes representing unicode characters.\n\tHowever, Python does not have a character data type, a single character is simply a string with a length of 1.\n\t->Square brackets can be used to access elements of the string.\n\n\tWrite (Python Booleans) in chatbox to know about python booleans.\n\n"
#pythonbooleans---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
R_pybooleans="Booleans represent one of two values: True or False.\n\tIn programming you often need to know if an expression is True or False.\n\tYou can evaluate any expression in Python, and get one of two answers, True or False.\n\tWhen you compare two values, the expression is evaluated and Python returns the Boolean answer:\n\n\tprint(10 > 9) \t output:-True\n\tprint(10 == 9) \t output:-False\n\tprint(10 < 9) \t output:- False \n\n\tWrite (Python lists) in chatbox to know about python lists.\n\n"
#pythonnumbers-----------------------------------------------------------------------------------------------------------------------------------------------------------------
R_pynumbers="There are three numeric types in Python:\n\tint\n\tfloat\n\tcomplex\n\n\tVariables of numeric types are created when you assign a value to them:\n\tExample:-\n\tx = 1  \t  # int\n\ty = 2.8 \t # float\n\tz = 1j \t  # complex.\n\n\tWrite (Python Lists) in chatbox to know about python lists\n\n"
#pythonlists
R_pylists="Lists are used to store multiple items in a single variable.\n\tLists are one of 4 built-in data types in Python used to store collections of data, the other 3 are Tuple, Set, and Dictionary, all with \n\tdifferent qualities and usage.\n\tLists are created using square brackets.\n\tList items are ordered, changeable, and allow duplicate values.\n\tList items are indexed, the first item has index [0], the second item has index [1] etc.\n\n\tExample:\n\tCreate a List:\n\tthislist = ['apple', 'banana', 'cherry']\n\tprint(thislist)\t\t output:-['apple','banana','cherry']\n\n\n\tWrite (Python Tuples) in chatbox to know about python Tuples.\n\n"
#pythontuples
R_pytuples="Tuples are used to store multiple items in a single variable.\n\tTuple is one of 4 built-in data types in Python used to store collections of data, the other 3 are List, Set, and Dictionary, all with \n\tdifferent qualities and usage.\n\tA tuple is a collection which is ordered and unchangeable.\n\tTuples are written with round brackets.\n\n\tExample:-\n\tCreate a Tuple:\n\tthistuple = ('apple', 'banana', 'cherry')\n\tprint(thistuple)\t\t OUTPUT:-('apple','banana','cherry')\n\n\tTuple items are ordered, unchangeable, and allow duplicate values.\n\tTuple items are indexed, the first item has index [0], the second item has index [1] etc.\n\n\n\tWrite (Python sets) in chatbox to know about python sets.\n\n"
#pythonsets
R_pysets="Sets are used to store multiple items in a single variable.\n\tSet is one of 4 built-in data types in Python used to store collections of data, the other 3 are List, Tuple, and Dictionary, all with\n\t different qualities and usage.\n\tA set is a collection which is unordered, unchangeable*, and unindexed.Sets are written with curly brackets.\n\n\tExample:-\n\tCreate a Set:\n\tthisset = {'apple', 'banana', 'cherry'}\n\tprint(thisset)\t\tOUTPUT:-{'banana','cherry','apple'}\n\n\tSet items are unordered, unchangeable, and do not allow duplicate values.\n\t They don't have any index value.\n\n\n\tWrite (Python dictionaries) in chatbox to know about python dictionaries.\n\n"
#pythondictinories
R_pydictionaries="Dictionaries are used to store data values in key:value pairs.\n\tA dictionary is a collection which is ordered*, changeable and do not allow duplicates.\n\tDictionaries are written with curly brackets, and have keys and values.\n\n\tExample:\n\tCreate and print a dictionary:\n\tthisdict = {'brand': 'Ford','model': 'Mustang','year': 1964}\n\tprint(thisdict)\t\t Output:-{'brand': 'Ford','model': 'Mustang','year': 1964}\n\n\n\tWrite (Python ifelse) in chatbox to know about python if else command.\n\n"
#pythonifelse
R_pyifelse="Python Conditions and If statements:-\n\tPython supports the usual logical conditions from mathematics:\n\n\t-->Equals: a == b\n\t-->Not Equals: a != b\n\t-->Less than: a < b\n\t-->Less than or equal to: a <= b\n\t-->Greater than: a > b\n\t-->Greater than or equal to: a >= b.\n\tThese conditions can be used in several ways, most commonly in 'if statements' and loops.\n\tAn 'if statement' is written by using the if keyword.\n\n\tExample:-\n\tIf statement:\n\ta = 33\n\tb = 200\n\tif b > a:\n\t\tprint('b is greater than a')\t\tOUTPUT:-b is greater than a.\n\n\n\tWrite (Python whileloops) in chatbox to know about python While loops\n\n."
#pythonwhileloop
R_pywhileloop="Python Loops\n\t Python has two primitive loop commands:\n\t1)while loops \n\t2)for loops.\n\n\tThe while Loop:-\n\tWith the while loop we can execute a set of statements as long as a condition is true.\n\n\tExample:-\n\tPrint i as long as i is less than 6:\n\n\ti = 1\n\twhile i < 6:\n\\t\print(i,end='')\n\t\ti += 1 \t\tOUTPUT:-12345.\n\n\n\tWrite (Python forloops) in chatbox to know about python forloop command.\n\n"
#pythonforloop
R_pyforloop="Python For Loops:-\n\tA for loop is used for iterating over a sequence (that is either a list, a tuple, a dictionary, a set, or a string).\n\tThis is less like the for keyword in other programming languages, and works more like an iterator method as found in other \n\tobject-orientated programming languages.\n\tWith the for loop we can execute a set of statements, once for each item in a list, tuple, set etc.\n\n\tExample:-\n\tPrint each fruit in a fruit list:\n\n\tfruits = ['apple', 'banana','cherry']\n\tfor x in fruits:\n\t\tprint(x,end='')\t\tOUTPUT:-apple banana cherry.\n\tThe for loop does not require an indexing variable to set beforehand\n\n\tWrite (Python functions) in chatbox to know about python functions\n\n"
#pythonfunctions
R_pyfunctions="A function is a block of code which only runs when it is called.\n\tYou can pass data, known as parameters, into a function.\n\tA function can return data as a result.\n\tCreating a Function:\n\tIn Python a function is defined using the def keyword:\n\n\tExample:-\n\tdef my_function():\n\t\tprint('Hello from a function')\n\n\tmy_function()\t\tOUTPUT:-Hello from a function.\n\n\n\tWrite (Python lamda function) in chatbox to know about python lamda function.\n\n"
#pythonlamdafunctions
R_pylamdafunctions="A lambda function is a small anonymous function.\n\tA lambda function can take any number of arguments, but can only have one expression.\n\n\tSyntax:-\n\n\tlambda arguments : expression\n\tThe expression is executed and the result is returned:\n\n\tExample:-\n\tAdd 10 to argument a, and return the result:\n\n\tx = lambda a : a + 10\n\tprint(x(5))\t\tOutput:-15.\n\n\n\tWrite (Python arrays) in chatbox to know about python arrays.\n\n"
#pythonarrays
R_pythonarrays="Python does not have built-in support for Arrays, but Python Lists can be used instead.\n\tArrays are used to store multiple values in one single variable.\n\tAn array is a special variable, which can hold more than one value at a time.\n\n\tIf you have a list of items (a list of car names, for example), storing the cars in single variables could look like this:\n\tcar1 = 'Ford'\n\tcar2 = 'Volvo'\n\tcar3 = 'BMW'.\n\n\n\tWrite (Python Modules) in chatbox to know about python Modules.\n\n"
#pythonmodules
R_pymodules="Consider a module to be the same as a code library.\n\tA file containing a set of functions you want to include in your application.\n\tTo create a module just save the code you want in a file with the file extension .py:\n\n\tExample:\n\tSave this code in a file named mymodule.py\n\n\tdef greeting(name):\n\t\tprint('Hello,' + name)\n\n\tNow we can use the module we just created, by using the import statement:\n\n\tExample:-\n\n\tImport the module named mymodule, and call the greeting function:\n\timport mymodule\n\n\tmymodule.greeting('Jonathan')"


#Write (Python dictionaries) in chatbox to know about python dictionaries.



























def unknown():
    response = ["Could you please re-phrase that? ",
                "...",
                "Sounds about right.",
                "What does that mean?"][
        random.randrange(4)]
    return response






